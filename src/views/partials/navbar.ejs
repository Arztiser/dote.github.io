<nav class="navbar is-primary" role="navigation" aria-label="main navigation">
  <div class="navbar-brand is-primary">
    <a class="navbar-item" href="https://discord.rovelstars.com">
      <img src="https://discord.rovelstars.com/assets/img/logo.svg" width="28" height="28"><span style="font-family: discord">Rovel Discord List</span>
    </a>

    <a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false" data-target="navbarmenuthing">
      <span aria-hidden="true"></span>
      <span aria-hidden="true"></span>
      <span aria-hidden="true"></span>
    </a>
  </div>

  <div id="navbarmenuthing" class="navbar-menu has-background-dark">
    <div class="navbar-start">
      <a class="navbar-item" href="/">
        <span class="has-text-primary"><i class="bx bxs-home"></i></span>Home
      </a>

      <a class="navbar-item" href="https://docs.rovelstars.com">
        <span class="icon has-text-info"><i class="bx bxs-book-open"></i></span> Documentation
      </a>
          <a class="navbar-item" href="/emojis">
            <span class="icon has-text-warning"><i class="bx bxs-wink-smile"></i></span> Emojis
          </a>
          <a class="navbar-item" href="/users">
            <span class="icon has-text-info"><i class="bx bxs-user-account"></i></span> Users
          </a>
          <a class="navbar-item" href="/servers">
            <span class="icon has-text-success"><i class="bx bxs-server"></i></span> Servers
          </a>
          <a class="navbar-item" href="/bots">
           <span class="icon has-text-danger"><i class="bx bxs-bot"></i></span> Bots
          </a>
          <hr class="navbar-divider">
          <a class="navbar-item" href="/server">
            <span style="color: #7289da;"><i class="bx bxl-discord"></i></span> Join Discord Server
          </a>
          <a class="navbar-item" href="https://github.com/rovelstars/rovel-discord-list">
           <i class="bx bxl-github"></i><i class="bx bx-code-alt"></i> Source Code
          </a>
    </div>

    <div class="navbar-end">
      <div class="navbar-item">
        <div class="buttons">
         <% if(!user){ %>
          <a class="button is-primary" href="/login">
            <i class="bx bxs-chevron-right-circle"></i>  Log in</a>
            <% } else { %>
              <a class="button is-danger" href="/logout">
            <i class="bx bxs-chevron-left-circle"></i>  Log out</a>
             <a class="button" style="background-color: #7289da;color: #ffffff;" href="/dashboard">
              <i class="bx bxs-grid-alt"></i>  DashBoard
             </a>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</nav>
<script>
 $(document).ready(function() {
twemoji.parse(document.body,  {folder: 'svg', ext: '.svg'})
  // Check for click events on the navbar burger icon
  $(".navbar-burger").click(function() {

      // Toggle the "is-active" class on both the "navbar-burger" and the "navbar-menu"
      $(".navbar-burger").toggleClass("is-active");
      $(".navbar-menu").toggleClass("is-active");
  });
   $(".avatar").addClass("vivify popIn");
   $(".is-announcement").addClass("vivify fadeInBottom");
   $(".is-bot-card").addClass("vivify popIn");
   
   var Canvas = document.getElementById('playground');
var ctx = Canvas.getContext('2d');

var resize = function() {
    Canvas.width = Canvas.clientWidth;
    Canvas.height = Canvas.clientHeight;
};
window.addEventListener('resize', resize);
resize();

var elements = [];
var presets = {};

presets.o = function (x, y, s, dx, dy) {
    return {
        x: x,
        y: y,
        r: 12 * s,
        w: 5 * s,
        dx: dx,
        dy: dy,
        draw: function(ctx, t) {
            this.x += this.dx;
            this.y += this.dy;
            
            ctx.beginPath();
            ctx.arc(this.x + + Math.sin((50 + x + (t / 10)) / 100) * 3, this.y + + Math.sin((45 + x + (t / 10)) / 100) * 4, this.r, 0, 2 * Math.PI, false);
            ctx.lineWidth = this.w;
            ctx.strokeStyle = '#fff';
            ctx.stroke();
        }
    }
};

presets.x = function (x, y, s, dx, dy, dr, r) {
    r = r || 0;
    return {
        x: x,
        y: y,
        s: 20 * s,
        w: 5 * s,
        r: r,
        dx: dx,
        dy: dy,
        dr: dr,
        draw: function(ctx, t) {
            this.x += this.dx;
            this.y += this.dy;
            this.r += this.dr;
            
            var _this = this;
            var line = function(x, y, tx, ty, c, o) {
                o = o || 0;
                ctx.beginPath();
                ctx.moveTo(-o + ((_this.s / 2) * x), o + ((_this.s / 2) * y));
                ctx.lineTo(-o + ((_this.s / 2) * tx), o + ((_this.s / 2) * ty));
                ctx.lineWidth = _this.w;
                ctx.strokeStyle = c;
                ctx.stroke();
            };
            
            ctx.save();
            
            ctx.translate(this.x + Math.sin((x + (t / 10)) / 100) * 5, this.y + Math.sin((10 + x + (t / 10)) / 100) * 2);
            ctx.rotate(this.r * Math.PI / 180);
            
            line(-1, -1, 1, 1, '#fff');
            line(1, -1, -1, 1, '#fff');
            
            ctx.restore();
        }
    }
};

for(var x = 0; x < Canvas.width; x++) {
    for(var y = 0; y < Canvas.height; y++) {
        if(Math.round(Math.random() * 8000) == 1) {
            var s = ((Math.random() * 5) + 1) / 10;
            if(Math.round(Math.random()) == 1)
                elements.push(presets.o(x, y, s, 0, 0));
            else
                elements.push(presets.x(x, y, s, 0, 0, ((Math.random() * 3) - 1) / 10, (Math.random() * 360)));
        }
    }
}

setInterval(function() {
    ctx.clearRect(0, 0, Canvas.width, Canvas.height);

    var time = new Date().getTime();
    for (var e in elements)
		elements[e].draw(ctx, time);
}, 10);
});
</script>
<canvas id="playground">
</canvas>